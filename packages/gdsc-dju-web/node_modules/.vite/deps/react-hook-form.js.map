{
  "version": 3,
  "sources": ["../../../../../.yarn/__virtual__/react-hook-form-virtual-6ea774c50b/0/cache/react-hook-form-npm-7.33.1-f1c46322f4-ec8f938b5a.zip/node_modules/react-hook-form/dist/index.esm.mjs"],
  "sourcesContent": ["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) \u2022 [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) \u2022 [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\n\nvar getProxyFormState = (formState, _proxyFormState, localProxyFormState, isRoot = true) => {\r\n    const result = {};\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const tearDown = (subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        };\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => tearDown(subscription);\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) \u2022 [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    const _mounted = React.useRef(true);\r\n    _name.current = name;\r\n    const callback = React.useCallback((value) => _mounted.current &&\r\n        shouldSubscribeByName(_name.current, value.name, exact) &&\r\n        shouldRenderFormState(value, _localProxyFormState.current) &&\r\n        updateFormState({\r\n            ...control._formState,\r\n            ...value,\r\n        }), [control, exact]);\r\n    useSubscribe({\r\n        disabled,\r\n        callback,\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, []);\r\n    return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    const isArray = Array.isArray(names);\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (isArray) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\r\n            get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) \u2022 [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    const callback = React.useCallback((formState) => {\r\n        if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n            const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n            updateValue(isUndefined(_name.current) ||\r\n                (isObject(fieldValues) && !objectHasFunction(fieldValues))\r\n                ? { ...fieldValues }\r\n                : Array.isArray(fieldValues)\r\n                    ? [...fieldValues]\r\n                    : isUndefined(fieldValues)\r\n                        ? defaultValue\r\n                        : fieldValues);\r\n        }\r\n    }, [control, exact, defaultValue]);\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback,\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => {\r\n        control._removeUnmounted();\r\n    });\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) \u2022 [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => {\r\n                _registerProps.current.onChange({\r\n                    target: {\r\n                        value: getEventValue(event),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.CHANGE,\r\n                });\r\n            }, [name]),\r\n            onBlur: React.useCallback(() => {\r\n                _registerProps.current.onBlur({\r\n                    target: {\r\n                        value: get(control._formValues, name),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.BLUR,\r\n                });\r\n            }, [name, control]),\r\n            ref: React.useCallback((elm) => {\r\n                const field = get(control._fields, name);\r\n                if (elm && field && elm.focus) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        select: () => elm.select(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            }, [name, control._fields]),\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) \u2022 [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) \u2022 [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus && isUndefined(_f.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (_f.refs) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        for (const key in data) {\r\n            if (isFunction(data[key])) {\r\n                copy = data;\r\n                break;\r\n            }\r\n            copy[key] = cloneObject(data[key]);\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) &&\r\n                        !objectRef.filter((data) => !isUndefined(data)).length))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) \u2022 [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    const callback = React.useCallback(({ values, name: fieldArrayName, }) => {\r\n        if (fieldArrayName === _name.current || !fieldArrayName) {\r\n            const fieldValues = get(values, _name.current, []);\r\n            setFields(fieldValues);\r\n            ids.current = fieldValues.map(generateId);\r\n        }\r\n    }, []);\r\n    useSubscribe({\r\n        callback,\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current) {\r\n            control._executeSchema([name]).then((result) => {\r\n                const error = get(result.errors, name);\r\n                const existingError = get(control._formState.errors, name);\r\n                if (existingError ? !error && existingError.type : error && error.type) {\r\n                    error\r\n                        ? set(control._formState.errors, name, error)\r\n                        : unset(control._formState.errors, name);\r\n                    control._subjects.state.next({\r\n                        errors: control._formState.errors,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => key.startsWith(control._names.focus));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isHTMLElement = (value) => {\r\n    const owner = value ? value.ownerDocument : 0;\r\n    const ElementClass = owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\r\n    return value instanceof ElementClass;\r\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === '' || isNullOrUndefined(value)\r\n            ? NaN\r\n            : +value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? undefined\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (required &&\r\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n            (isBoolean(inputValue) && !inputValue) ||\r\n            (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n            (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber || +inputValue;\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    let _formState = {\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = cloneObject(_options.defaultValues) || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(callback, wait);\r\n    };\r\n    const _updateValid = async (shouldSkipRender) => {\r\n        let isValid = false;\r\n        if (_proxyFormState.isValid) {\r\n            isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuildInValidation(_fields, true);\r\n            if (!shouldSkipRender && isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (_proxyFormState.errors &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let isFieldDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n        if (_proxyFormState.isDirty) {\r\n            const isPreviousFormDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            isFieldDirty = isPreviousFormDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\r\n            const isPreviousFieldDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    isPreviousFieldDirty !== get(_formState.dirtyFields, name);\r\n        }\r\n        if (isBlurEvent && !isPreviousFieldTouched) {\r\n            set(_formState.touchedFields, name, isBlurEvent);\r\n            output.touchedFields = _formState.touchedFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    (_proxyFormState.touchedFields &&\r\n                        isPreviousFieldTouched !== isBlurEvent);\r\n        }\r\n        isFieldDirty && shouldRender && _subjects.state.next(output);\r\n        return isFieldDirty ? output : {};\r\n    };\r\n    const shouldRenderByError = async (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(props.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating &&\r\n            !Object.values(validateFields).some((v) => v)) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => _options.resolver\r\n        ? await _options.resolver({ ..._formValues }, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation))\r\n        : {};\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuildInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f: fieldReference, ...fieldValue } = field;\r\n                if (fieldReference) {\r\n                    const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\r\n                    if (fieldError[fieldReference.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!shouldOnlyCheckValid) {\r\n                        fieldError[fieldReference.name]\r\n                            ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name])\r\n                            : unset(_formState.errors, fieldReference.name);\r\n                    }\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => {\r\n        const fieldValues = {\r\n            ...(_stateFlags.mount\r\n                ? _formValues\r\n                : isUndefined(defaultValue)\r\n                    ? _defaultValues\r\n                    : isString(names)\r\n                        ? { [names]: defaultValue }\r\n                        : defaultValue),\r\n        };\r\n        return generateWatchOutput(names, _names, fieldValues, isGlobal);\r\n    };\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((selectRef) => (selectRef.selected = fieldValue.includes(selectRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => !checkboxRef.disabled &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n                delayErrorCallback && delayErrorCallback(0);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name] ? +1 : 1;\r\n            _subjects.state.next({\r\n                isValidating: true,\r\n            });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                isValid = await _updateValid(true);\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuildInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuildInValidation(_fields);\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (info) => name(_getWatch(undefined, defaultValue), info),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(!!Array.isArray(get(_defaultValues, name))\r\n                                            ? [{}]\r\n                                            : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuildInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors)) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                if (onInvalid) {\r\n                    await onInvalid({ ..._formState.errors }, e);\r\n                }\r\n                _options.shouldFocusError &&\r\n                    focusFieldBy(_fields, (key) => get(_formState.errors, key), _names.mount);\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            try {\r\n                                isHTMLElement(fieldReference) &&\r\n                                    fieldReference.closest('form').reset();\r\n                                break;\r\n                            }\r\n                            catch (_a) { }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors\r\n                ? _formState.errors\r\n                : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name)._f;\r\n        const fieldRef = field.refs ? field.refs[0] : field.ref;\r\n        fieldRef.focus();\r\n        options.shouldSelect && fieldRef.select();\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to mange the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) \u2022 [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) \u2022 [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    });\r\n    if (_formControl.current) {\r\n        _formControl.current.control._options = props;\r\n    }\r\n    else {\r\n        _formControl.current = {\r\n            ...createFormControl(props),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    const callback = React.useCallback((value) => {\r\n        if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n            control._formState = {\r\n                ...control._formState,\r\n                ...value,\r\n            };\r\n            updateFormState({ ...control._formState });\r\n        }\r\n    }, [control]);\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback,\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],
  "mappings": "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",
  "names": []
}
